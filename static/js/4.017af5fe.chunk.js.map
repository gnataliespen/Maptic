{"version":3,"sources":["components/Layout/Map.js"],"names":["initialViewport","latitude","longitude","zoom","Map","useState","viewport","setViewport","useContext","Context","state","dispatch","mobile","useMedia","maxWidth","useEffect","a","api","get","pins","type","GET_PINS","payload","data","getPins","highlightNew","pin","date","Date","createdAt","differenceInMinutes","now","Number","getUserPosition","navigator","geolocation","getCurrentPosition","position","coords","setPin","useCallback","SET_PIN","renderMarkers","useMemo","map","key","_id","offsetLeft","offsetTop","className","captureClick","name","size","color","onClick","id","width","height","mapStyle","mapboxApiAccessToken","process","onViewportChange","newViewport","scrollZoom","lngLat","leftButton","target","draft","CREATE_DRAFT","UPDATE_DRAFT","icon","aria-label"],"mappings":"ozBAuBA,IAAMA,EAAkB,CACtBC,SAAU,UACVC,WAAY,UACZC,KAAM,IAsHOC,UAnHH,WAAO,IAAD,EACgBC,mBAASL,GADzB,mBACTM,EADS,KACCC,EADD,OAEYC,qBAAWC,KAA/BC,EAFQ,EAERA,MAAOC,EAFC,EAEDA,SAETC,EAASC,IAAS,CAAEC,SAAU,MAEpCC,qBAAU,YACK,uCAAG,4BAAAC,EAAA,sEACKC,IAAIC,IAAI,SADb,OACRC,EADQ,OAEdR,EAAS,CAAES,KAAMC,IAAUC,QAASH,EAAKI,OAF3B,2CAAH,qDAIbC,KACC,CAACb,IAEJ,IAWMc,EAAe,SAAAC,GAEnB,IAAMC,EAAO,IAAIC,KAAKF,EAAIG,WAE1B,OADcC,YAAoBF,KAAKG,MAAOC,OAAOL,KAAU,GAChD,QAAU,UAGrBM,EAAe,uCAAG,sBAAAjB,EAAA,sDAElB,gBAAiBkB,WAEnBA,UAAUC,YAAYC,oBAAmB,SAAAC,GAAa,IAAD,EACnBA,EAASC,OAAjCrC,EAD2C,EAC3CA,SAAUC,EADiC,EACjCA,UAClBK,EAAY,EAAD,GACND,EADM,CAETL,WACAC,kBATgB,2CAAH,qDAgBfqC,EAASC,uBACb,SAAAd,GACEf,EAAS,CAAES,KAAMqB,IAASnB,QAASI,MAErC,CAACf,IAGG+B,EAAgBC,mBAAQ,WAC5B,OAAOjC,EAAMS,KAAKyB,KAAI,SAAAlB,GAAG,OACvB,kBAAC,IAAD,CACEmB,IAAKnB,EAAIoB,IACT7C,SAAUyB,EAAIzB,SACdC,UAAWwB,EAAIxB,UACf6C,YAAa,GACbC,WAAY,GACZC,UAAU,SACVC,cAAc,GAEd,kBAAC,IAAD,CACEC,KAAK,SACLC,KAAK,MACLC,MAAO5B,EAAaC,GACpBuB,UAAU,MACVK,QAAS,kBAAMf,EAAOb,YAI3B,CAAChB,EAAMS,KAAMoB,IAEhB,OACE,yBAAKU,UAAU,iBACb,kBAAC,IAAD,eACEM,GAAG,MACHC,MAAM,OACNC,OAAO,qBACPC,SAAS,oCACTC,qBAAsBC,6FACtBC,iBAAkB,SAAAC,GAAW,OAAIvD,EAAYuD,IAC7CC,YAAanD,EACb0C,QAzEiB,SAAC,GAAoC,IAAlCU,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,OAE5C,GAAKD,GAAmC,oBAArBC,EAAOjB,UAA1B,CAFyD,kBAG3Be,EAH2B,GAGlD9D,EAHkD,KAGvCD,EAHuC,KAKpDS,EAAMyD,OACTxD,EAAS,CAAES,KAAMgD,MAEnBzD,EAAS,CAAES,KAAMiD,IAAc/C,QAAS,CAAEpB,YAAWD,iBAkE7CK,GAEJ,kBAAC,IAAD,CACEgD,QAASrB,EACTqC,KAAK,aACLrB,UAAU,sBACVsB,aAAW,kBACXhB,GAAG,aAEL,kBAAC,IAAD,CACEM,iBAAkB,SAAAC,GAAW,OAAIvD,EAAYuD,MAE9CpD,EAAMyD,OACL,kBAAC,IAAD,CACElE,SAAUS,EAAMyD,MAAMlE,SACtBC,UAAWQ,EAAMyD,MAAMjE,UACvB6C,YAAa,GACbC,WAAY,IAEZ,kBAAC,IAAD,CAAMG,KAAK,SAASC,KAAK,MAAMC,MAAM,UAGxCX","file":"static/js/4.017af5fe.chunk.js","sourcesContent":["import { Icon, Button } from \"semantic-ui-react\";\nimport { differenceInMinutes } from \"date-fns\";\nimport useMedia from \"use-media\";\nimport ReactMapGl, { NavigationControl, Marker } from \"react-map-gl\";\nimport React, {\n  useState,\n  useEffect,\n  useContext,\n  useMemo,\n  useCallback\n} from \"react\";\n\nimport Context from \"../../state/Context\";\nimport api from \"../../util/apiConnection\";\nimport {\n  CREATE_DRAFT,\n  UPDATE_DRAFT,\n  GET_PINS,\n  SET_PIN\n} from \"../../state/types\";\n\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nconst initialViewport = {\n  latitude: 30.267153,\n  longitude: -97.743057,\n  zoom: 13\n};\n\nconst Map = () => {\n  const [viewport, setViewport] = useState(initialViewport);\n  const { state, dispatch } = useContext(Context);\n  //Check if user is on mobile\n  const mobile = useMedia({ maxWidth: 650 });\n\n  useEffect(() => {\n    const getPins = async () => {\n      const pins = await api.get(\"/pins\");\n      dispatch({ type: GET_PINS, payload: pins.data });\n    };\n    getPins();\n  }, [dispatch]);\n\n  const handleMapClick = ({ lngLat, leftButton, target }) => {\n    //If the user left clicks on the map start a pin draft\n    if (!leftButton || target.className === \"crosshairs icon\") return;\n    const [longitude, latitude] = lngLat;\n\n    if (!state.draft) {\n      dispatch({ type: CREATE_DRAFT });\n    }\n    dispatch({ type: UPDATE_DRAFT, payload: { longitude, latitude } });\n  };\n\n  const highlightNew = pin => {\n    //Highlight pins created in the last 30 minutes\n    const date = new Date(pin.createdAt);\n    const isNew = differenceInMinutes(Date.now(), Number(date)) <= 30;\n    return isNew ? \"green\" : \"purple\";\n  };\n\n  const getUserPosition = async () => {\n    //If geolocation is available\n    if (\"geolocation\" in navigator) {\n      //Get user position and move the Viewport to it\n      navigator.geolocation.getCurrentPosition(position => {\n        const { latitude, longitude } = position.coords;\n        setViewport({\n          ...viewport,\n          latitude,\n          longitude\n        });\n      });\n    }\n  };\n\n  //Set currently select pin\n  const setPin = useCallback(\n    pin => {\n      dispatch({ type: SET_PIN, payload: pin });\n    },\n    [dispatch]\n  );\n\n  const renderMarkers = useMemo(() => {\n    return state.pins.map(pin => (\n      <Marker\n        key={pin._id}\n        latitude={pin.latitude}\n        longitude={pin.longitude}\n        offsetLeft={-19}\n        offsetTop={-37}\n        className=\"marker\"\n        captureClick={true}\n      >\n        <Icon\n          name=\"marker\"\n          size=\"big\"\n          color={highlightNew(pin)}\n          className=\"pin\"\n          onClick={() => setPin(pin)}\n        />\n      </Marker>\n    ));\n  }, [state.pins, setPin]);\n\n  return (\n    <div className=\"map-container\">\n      <ReactMapGl\n        id=\"map\"\n        width=\"100%\"\n        height=\"calc(100vh - 72px)\"\n        mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_KEY}\n        onViewportChange={newViewport => setViewport(newViewport)}\n        scrollZoom={!mobile}\n        onClick={handleMapClick}\n        {...viewport}\n      >\n        <Button\n          onClick={getUserPosition}\n          icon=\"crosshairs\"\n          className=\"mapboxgl-ctrl-group\"\n          aria-label=\"Use my location\"\n          id=\"user-pos\"\n        ></Button>\n        <NavigationControl\n          onViewportChange={newViewport => setViewport(newViewport)}\n        />\n        {state.draft && (\n          <Marker\n            latitude={state.draft.latitude}\n            longitude={state.draft.longitude}\n            offsetLeft={-19}\n            offsetTop={-37}\n          >\n            <Icon name=\"marker\" size=\"big\" color=\"pink\" />\n          </Marker>\n        )}\n        {renderMarkers}\n      </ReactMapGl>\n    </div>\n  );\n};\nexport default Map;\n"],"sourceRoot":""}